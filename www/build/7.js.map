{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACa;AACN;AAEZ;AAcpC;IAAA;IAA+B,CAAC;IAAnB,eAAe;QAZ3B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,yDAAS;aACV;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,yDAAS,CAAC;gBACnC,4EAAe,CAAC,QAAQ,EAAE;aAC3B;YACD,OAAO,EAAE;gBACP,yDAAS;aACV;SACF,CAAC;OACW,eAAe,CAAI;IAAD,sBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;AClBc;AACa;AACa;AAC4B;AACtC;AAET;AASjD;IAGI,uBAAuB;IACvB,mBAAmB;IACnB,sCAAsC;IAEtC;;;QAGI;IACN,yCAAyC;IACzC,iEAAiE;IACjE,6BAA6B;IAE7B,8BAA8B;IAC9B,mCAAmC;IAEnC,mBACS,OAAsB,EACtB,IAAU;QACjB,wBAAwB;QACjB,SAA0B,EAC1B,SAA0B,EAC1B,gBAAkC,EAClC,QAAwB,EACvB,IAAiB,EACzB,EAAe;QAGf;;WAEG;QAbI,YAAO,GAAP,OAAO,CAAe;QACtB,SAAI,GAAJ,IAAI,CAAM;QAEV,cAAS,GAAT,SAAS,CAAiB;QAC1B,cAAS,GAAT,SAAS,CAAiB;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,aAAQ,GAAR,QAAQ,CAAgB;QACvB,SAAI,GAAJ,IAAI,CAAa;QAQzB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,KAAK,CAAC;YACtB,KAAK,EAAE,CAAC,EAAE,CAAC;YACX,QAAQ,EAAE,CAAC,EAAE,CAAC;SACjB,CAAC,CAAC;QAEH;;;WAGG;IACL,CAAC;IAED;;;;;;;;;;OAUG;IAEH,yBAAK,GAAL;QAAA,iBA8BC;QA7BK;;;;;;;WAOG;QACL;;;;;;;;aAQK;QACL,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,MAAM,CAAC;QACX,CAAC;QACD,IAAI,WAAW,GAAG;YACd,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAE,IAAI,CACxC,cAAM,YAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAA7B,CAA6B,EACnC,eAAK,IAAI,YAAI,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,EAA/B,CAA+B,CAC3C,CAAC;IACN,CAAC;IAED;;;;;;;;OAQG;IAEH,gCAAY,GAAZ;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC;IACD,+CAA+C;IAC/C,8BAAU,GAAV;QACI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;IAzGU,SAAS;QAJrB,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;WACG;SAC1B,CAAC;+EAoB+B;YAChB,sEAAI;YAEC,sEAAe;YACf,6EAAe;YACR,sEAAgB;YACxB,4EAAc;YACjB,mEAAW;YACrB,MAAW;OA3BN,SAAS,CA0GrB;IAAD,CAAC;AAAA;SA1GY,SAAS,e","file":"7.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IonicPageModule } from 'ionic-angular';\n\nimport { LoginPage } from './login';\n\n@NgModule({\n  declarations: [\n    LoginPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(LoginPage),\n    TranslateModule.forChild()\n  ],\n  exports: [\n    LoginPage\n  ]\n})\nexport class LoginPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","import { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { IonicPage, NavController, ToastController, ViewController, AlertController } from 'ionic-angular';\nimport { AuthService } from '../../services/auth.service';\n\nimport { User } from '../../providers/user/user';\nimport { SignupPage } from '../signup/signup';\nimport { MainPage } from '../main/main';\n\n@IonicPage()\n@Component({\n  selector: 'page-login',\n  templateUrl: 'login.html'\n})\nexport class LoginPage {\n    loginForm: FormGroup;\n\tloginError: string;\n    //loginForm: FormGroup;\n    //loading: Loading;\n    //account = {email: '', password: ''};\n\n    /*fieldName: any = {\n        email: 'email',\n        password: 'password'\n    };*/\n  // The account fields for the login form.\n  // If you're using the username field with or without email, make\n  // sure to add it to the type\n\n  // Our translated text strings\n  //private loginErrorString: string;\n\n  constructor(\n    public navCtrl: NavController,\n    public user: User,\n    //public formCtrl: Form,\n    public toastCtrl: ToastController,\n    public alertCtrl: AlertController,\n    public translateService: TranslateService,\n    public viewCtrl: ViewController,\n    private auth: AuthService,\n    fb: FormBuilder\n    ) {\n\n    /*this.translateService.get('LOGIN_ERROR').subscribe((value) => {\n      this.loginErrorString = value;\n  });*/\n\n    this.loginForm = fb.group({\n        email: [''],\n        password: ['']\n    });\n\n    /*this.loginForm = this.formBuilder.group({\n      email: [''],\n      password: ['']\n  });*/\n  }\n\n  /*ionViewDidLoad() {\n    // this.user.checkUser();\n    let d = {\n      \"email\" : \"a@a.com\",\n      \"password\" : \"ionic\"\n    }\n    // this.user.login(d)\n    this.user.login(d).subscribe((resp) => {\n      console.log(resp)\n    })\n  }*/\n\n  login() {\n        /*if (this.loginForm.invalid) {\n          this.formCtrl.validateForm(this.loginForm.controls, this.account.login);\n          return console.error('Invalid form');\n        }\n\n        return this.user.login(this.loginForm.value).then(() => {\n          this.navCtrl.push('MainPage');\n      });*/\n      /*this.user.login(this.account).subscribe((resp) => {\n          if (resp) {\n              this.navCtrl.push('MainPage');\n          } else {\n              this.showError(\"Username or Password incorrect\");\n          }\n      }, error => {\n          this.showError(error.message);\n      });*/\n      let data = this.loginForm.value;\n      if (!data.email) {\n          return;\n      }\n      let credentials = {\n          email: data.email,\n          password: data.password\n      };\n      this.auth.signInWithEmail(credentials) .then(\n          () => this.navCtrl.push('MainPage'),\n          error => this.loginError = error.message\n      );\n  }\n\n  /*showError(text) {\n      //this.loading.dismiss();\n      let alert = this.alertCtrl.create({\n          title: 'Unable',\n          subTitle: text,\n          buttons: ['OK']\n      });\n      //alert.present(prompt);\n  }*/\n\n  gotoMainPage () {\n    this.navCtrl.push('MainPage');\n  }\n  // Attempt to login in through our User service\n  gotoSignUp() {\n      this.navCtrl.push('SignupPage');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts"],"sourceRoot":""}